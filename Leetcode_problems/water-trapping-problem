//TC:O(N)
//SC:O(1)
class Solution {
    /*public int trap(int[] height) {
        int left=0;
        int right=height.length-1;
        int lmx=0;
        int rmx=0;
        int ans=0;
        while(left<=right)
        {
            if(height[left]<=height[right])
            {
                if(height[left]>=lmx)
                {
                    lmx=height[left];
                }
                else
                {
                    ans+=lmx-height[left];
                }
                left++;
            }
            else
            {
                if(height[right]>=rmx)
                {
                    rmx=height[right];
                }
                else
                {
                    ans+=rmx-height[right];
                }
                right--;
            }
        }
        return ans;
    }*/
    //Better
    //TC:O(N)+O(N)+O(N)
    //SC:O(2N)
    public int trap(int[] height) {
        int n=height.length;
        int premax[]=new int[n];
        int suffmax[]=new int[n];
        int ans=0;
        premax[0]=height[0];
        suffmax[n-1]=height[n-1];
        for(int i=1;i<n;i++)
        {
            premax[i]=Math.max(premax[i-1],height[i]);
        }
        for(int i=n-2;i>=0;i--)
        {
            suffmax[i]=Math.max(suffmax[i+1],height[i]);
        }
        for(int i=0;i<n;i++)
        {
            ans+=Math.min(premax[i],suffmax[i])-height[i];
        }
        return ans;
    }
}

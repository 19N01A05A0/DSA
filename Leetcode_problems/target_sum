//tc:o(m*n)
//m=no.of ele, n=(target+sm)/2;
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sm=0;
        int ctzeros=0;
        for(int i=0;i<nums.length;i++)
        {
            sm+=nums[i];
            if(nums[i]==0)
            {
                ctzeros+=1;
            }
        }
        int newtar=(target+sm)/2;
        if((target<0 && Math.abs(target)!=Math.abs(sm))||(sm-target)<0||(target+sm)%2!=0)
        {
            //target<0 to hndle [1] tar=0
            //abs to handle [-100] tar=100 accptd
            //[-1000] tar=100 not accptd
            //(target+sm)%2!=0 odd sum cannot be divided to two subsets
            //(sm-target)<0 ex:sm=20 tar=30 can't mke
            System.out.println("s");
            return 0;
        }
        else{
        int m=nums.length+1;
        int n=newtar+1;
        int dp[][]=new int[m][n];
        for(int i=0;i<m;i++)
        {
            dp[i][0]=1;
        }
        for(int j=1;j<n;j++)
        {
            dp[0][j]=0;
        }
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                
                if(nums[i-1]>j||nums[i-1]==0)
                {
                    dp[i][j]=dp[i-1][j];
                }
                else
                {
                    dp[i][j]=dp[i-1][j]+dp[i-1][j-nums[i-1]];
                }
            }
        }
        return (int)Math.pow(2,ctzeros)*dp[m-1][n-1];
        }
    }
}

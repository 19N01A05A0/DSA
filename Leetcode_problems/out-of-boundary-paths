//Time complexity: O(n∗m∗maxMoves)
//Space complexity: O(n∗m∗maxMoves)
class Solution {
    long[][][] memo;
    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        memo=new long[m+1][n+1][maxMove+1];
        for(int i=0;i<=m;i++)
        {
            for(int j=0;j<=n;j++)
            {
                Arrays.fill(memo[i][j],-1);
            }
        }
        return (int)helper(m,n,maxMove,startRow,startColumn);
    }
    public long helper(int m,int n,int maxMove,int row,int col)
    {
        if(maxMove<0)
        {
            return 0;
        }
        if(row==m||row<0||col==n||col<0)
        {
            return 1;
        }
        if(memo[row][col][maxMove]!=-1)
        {
            return memo[row][col][maxMove];
        }
        long tot=0;
        long left=helper(m,n,maxMove-1,row,col-1);
        long right=helper(m,n,maxMove-1,row,col+1);
        long down=helper(m,n,maxMove-1,row-1,col);
        long up=helper(m,n,maxMove-1,row+1,col);
        tot=(long)((left+right+up+down)%1_0000_00007);
        memo[row][col][maxMove]=tot;
        return tot;
    }
}

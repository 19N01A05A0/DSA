//tc:o(2^n)
//sc:o(n)
/*class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m=text1.length()-1;
        int n=text2.length()-1;
        return helper(m,n,text1,text2);
    }
    public int helper(int m,int n, String text1, String text2)
    {
        if(m<0||n<0)
        {
            return 0;
        }
        char c1=text1.charAt(m);
        char c2=text2.charAt(n);
        if(c1==c2)
        {
            return 1+helper(m-1,n-1,text1,text2);
        }
        return Math.max(helper(m,n-1,text1,text2),helper(m-1,n,text1,text2));
    }
}*/
//TC:O(N*M)
//SC:O(N*M)
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m=text1.length()-1;
        int n=text2.length()-1;
        int dp[][]=new int[m+1][n+1];
        for(int j=0;j<n;j++)
        {
            dp[0][j]=0;
        }
        for(int i=0;i<m;i++)
        {
            dp[i][0]=0;
        }
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                if(text1.charAt(i-1)==text2.charAt(j-1))
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[m][n];
    }
    
}

//tc:o(2n)
//sc:o(2n)
class Solution {
    public int rob(int[] nums) {
        List<Integer> al1=new ArrayList<>();
        List<Integer> al2=new ArrayList<>();
        if(nums.length==1)
        {
            return nums[0];
        }
        for(int i=0;i<nums.length;i++)
        {
            if(i!=0)
            {
                al1.add(nums[i]);
            }
            if(i!=nums.length-1)
            {
                al2.add(nums[i]);
            }
        }
        int mx1=helper(al1);
        int mx2=helper(al2);
        return Math.max(mx1,mx2);
    }
    public int helper(List<Integer> nums)
    {
        int n=nums.size();
        int dp[]=new int[n];
        if(n<=0)
        {
            return 0;
        }
        if(n>0){
        dp[0]=nums.get(0);
        }
        if(n>1){
        dp[1]=Math.max(nums.get(0),nums.get(1));
        }
        for(int i=2;i<n;i++)
        {
            int take=nums.get(i)+dp[i-2];
            int nottake=0+dp[i-1];
            dp[i]=Math.max(take,nottake);
        }
        return dp[n-1];
    }
}

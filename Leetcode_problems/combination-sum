//tc:o((2^t)*k)
//sc:o(k*x)
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
       List<List<Integer>> resultlist=new ArrayList<>();
       helper(candidates,target,0,resultlist,new ArrayList<>());
       return resultlist;
    }
    public void helper(int[] candidates,int target,int index,List<List<Integer>> al,List<Integer> l)
    {   
            if(index==candidates.length){
            if(target==0)
            {
                al.add(new ArrayList<>(l));
                
            }
            return;
            }
        
        if(candidates[index]<=target)
        {
            l.add(candidates[index]);
            helper(candidates,target-candidates[index],index,al,l);
            l.remove(l.size()-1);
        }
        helper(candidates,target,index+1,al,l);
    }
}

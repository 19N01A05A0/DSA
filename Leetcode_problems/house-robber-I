//tc:o(2^n)
//sc:o(n)
/*class Solution {
    public int rob(int[] nums) {
        int ind=nums.length-1;
        return helper(nums,ind);
    }
    public int helper(int[] nums,int ind)
    {   
        if(ind==0)return nums[0];
        if(ind<0)return 0;
        int take=nums[ind]+helper(nums,ind-2);
        int nottake=0+helper(nums,ind-1);
        return Math.max(take,nottake);
    }
}*/
//TC:O(N)
//sc:o(n)
class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        int dp[]=new int[n];
        if(n<=0)
        {
            return 0;
        }
        if(n>0){
        dp[0]=nums[0];
        }
        if(n>1){
        dp[1]=Math.max(nums[0],nums[1]);
        }
        for(int i=2;i<n;i++)
        {
            int take=nums[i]+dp[i-2];
            int nottake=0+dp[i-1];
            dp[i]=Math.max(take,nottake);
        }
        return dp[n-1];
    }
}
